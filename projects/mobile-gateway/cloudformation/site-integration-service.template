{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Site Integration Service cloudformation template",
  "Parameters": {
    "environment": {
      "Description": "The environment for the application stack",
      "Type": "String",
      "Default": "dev"
    },
    "vpcStackName": {
      "Description": "The stack name for the VPC CF stack",
      "Type": "String"
    },
    "kafkaStackName": {
      "Description": "The stack name for the Kafka CF stack",
      "Type": "String"
    },
    "rdsSecurityGroupId": {
      "Description": "The id of the security group for the RDS instance",
      "Type": "String"
    },
    "enableSsh": {
      "Type": "String",
      "Description": "If to enable ssh on instances",
      "Default": "no",
      "AllowedValues": [
        "yes",
        "no"
      ]
    },
    "amiId": {
      "Description": "The Ami id to use for instances",
      "Type": "String"
    },
    "asgDesiredCapacity": {
      "Description": "The number of instances that are desired",
      "Type": "String",
      "Default": "1"
    },
    "asgMaxCount": {
      "Description": "The max number of instances that can be in the ASG",
      "Type": "String",
      "Default": "4"
    },
    "asgMinCount": {
      "Description": "The min number of instances that can be in the ASG",
      "Type": "String",
      "Default": "0"
    },
    "asgServiceRoleName": {
      "Description": "ServiceRole for the AutoScalingGroup with access to the KMS key for the EC2 instance",
      "Type": "String"
    },
    "instanceType": {
      "Description": "The instance type to use",
      "Type": "String"
    },
    "instanceKeyPair": {
      "Description": "The instance keypair to use, this will only be used if enableSSH is yes, but must be passed",
      "Type": "String"
    },
    "devopsBucket": {
      "Description": "The bucket for devops related stuff",
      "Type": "String",
      "Default": "wex-mobile-devops"
    },
    "sumoAgentVersion": {
      "Description": "The version of the sumologic agent to use for bootstrapping",
      "Type": "String",
      "Default": "19.227-15"
    },
    "ansibleRoleVersion": {
      "Description": "The version of the ansible roles to deploy",
      "Type": "String"
    },
    "projectVersion": {
      "Description": "The version of the mobile gateway project to deploy",
      "Type": "String"
    },
    "appVersion": {
      "Description": "The version of the java application to deploy",
      "Type": "String"
    },
    "deploymentId": {
      "Description": "The id of the deploy",
      "Type": "String"
    }
  },

  "Conditions": {
    "EnableSsh": {"Fn::Equals": [{"Ref": "enableSsh"}, "yes"]},
    "NonProd": {"Fn::Not": [{"Fn::Equals": [{"Ref": "environment"}, "prod"]}]}
  },

  "Resources": {
    "InstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:Describe*",
                    "cloudwatch:Describe*",
                    "cloudwatch:List*",
                    "cloudwatch:PutMetricAlarm*",
                    "cloudwatch:PutMetricData",
                    "cloudwatch:DeleteAlarms",
                    "cloudwatch:Get*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "CloudformationAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:SignalResource",
                  "Resource": {"Fn::Sub": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"}
                }
              ]
            }
          },
          {
            "PolicyName": "ElbAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["elasticloadbalancing:Describe*"],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "Ec2Tagging",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["ec2:CreateTags", "ec2:DeleteTags", "ec2:DescribeTags", "ec2:DescribeInstances"],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "ParameterStoreAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ssm:DescribeParameters",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "kms:Decrypt",
                  "Resource": {"Fn::ImportValue": {"Fn::Sub": "${vpcStackName}-ParameterStoreKmsKey-Arn"} }
                },
                {
                  "Effect": "Allow",
                  "Action": "ssm:GetParameter",
                  "Resource": [
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${environment}.fdc.api.*"},
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${environment}.site-int.*"},
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${environment}.splunk.*"},
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${environment}.sumologic.*"},
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${environment}.trendmicro.*"}
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": ["s3:GetBucketLocation", "s3:ListAllMyBuckets"],
                  "Effect": "Allow",
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Action": ["s3:List*", "s3:HeadBucket", "s3:PutObject*"],
                  "Effect": "Allow",
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${devopsBucket}/system-reports/${environment}"},
                    {"Fn::Sub": "arn:aws:s3:::${devopsBucket}/system-reports/${environment}/*"}
                  ]
                },
                {
                  "Action": ["s3:List*", "s3:GetObject"],
                  "Effect": "Allow",
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${devopsBucket}"},
                    {"Fn::Sub": "arn:aws:s3:::${devopsBucket}/*"},
                    "arn:aws:s3:::wex-mobile-artifacts",
                    "arn:aws:s3:::wex-mobile-artifacts/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceIamProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": {"Fn::Sub": "${environment}-site-int-service-iam-profile"},
        "Path": "/",
        "Roles": [{"Ref": "InstanceIamRole"}]
      }
    },
    "InstanceSg": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {"Fn::Sub": "${environment}-site-int-service-SG"},
        "GroupDescription": {"Fn::Sub": "${environment} Site Integration Service Instance Security Group"},
        "VpcId": {"Fn::ImportValue": {"Fn::Sub": "${vpcStackName}-Vpc-Id"} },
        "SecurityGroupIngress": []
      }
    },
    "InstanceSgRdsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {"Ref": "rdsSecurityGroupId"},
        "IpProtocol": "tcp",
        "FromPort": 5432,
        "ToPort": 5432,
        "SourceSecurityGroupId": {"Ref": "InstanceSg"}
      }
    },
    "ProxySshDev78NetIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSsh",
      "Properties": {
        "GroupId": {"Ref": "InstanceSg"},
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "CidrIp": "10.78.0.0/16"
      }
    },
    "ProxySshDev79NetIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSsh",
      "Properties": {
        "GroupId": {"Ref": "InstanceSg"},
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "CidrIp": "10.79.0.0/16"
      }
    },
    "InstanceLc": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "IamInstanceProfile": {"Ref": "InstanceIamProfile"},
        "ImageId": {"Ref": "amiId"},
        "InstanceType": {"Ref": "instanceType"},
        "SecurityGroups": [{"Ref": "InstanceSg"}, {"Fn::ImportValue": {"Fn::Sub": "${kafkaStackName}-KafkaIngressSg-Id"} }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": "30",
              "VolumeType": "gp2"
            }
          }
        ],
        "KeyName": {"Fn::If": ["EnableSsh", {"Ref": "instanceKeyPair"}, {"Ref": "AWS::NoValue"}]},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "\n",
                "# initialization variables\n",
                "_devopsBucket=", {"Ref": "devopsBucket"}, "\n",
                "_environment=", {"Ref": "environment"}, "\n",
                "_region=", {"Ref": "AWS::Region"}, "\n",
                "_appVersion=", {"Ref": "appVersion"}, "\n",
                "_ansibleRoleVersion=", {"Ref": "ansibleRoleVersion"}, "\n",
                "_projectVersion=", {"Ref": "projectVersion"}, "\n",
                "_sumoAgentVersion=", {"Ref": "sumoAgentVersion"}, "\n",
                "_stackName=", {"Ref": "AWS::StackName"}, "\n",
                "_deploymentId=", {"Ref": "deploymentId"}, "\n",
                "_appName=site-integration-service\n",
                "\n",
                "# pull ansible scripts\n",
                "mkdir /root/ansible_scripts\n",
                "aws s3 cp s3://${_devopsBucket}/ansible/${_ansibleRoleVersion}/scripts /root/ansible_scripts ",
                "--recursive --region ${_region}\n",
                "chmod -R 700 /root/ansible_scripts\n",
                "\n",
                "# run bootstrap_logs\n",
                "_sumoS3RpmUrl=\"s3://${_devopsBucket}/installers/sumologic/SumoCollector-${_sumoAgentVersion}.x86_64.rpm\"\n",
                "chmod 700 /root/ansible_scripts/bootstrap_logs.sh && /root/ansible_scripts/bootstrap_logs.sh ",
                "sumo ${_environment} ${_appName} mobile ${_sumoS3RpmUrl}\n",
                "\n",
                "# pull ansible role archive\n",
                "aws s3 cp s3://${_devopsBucket}/ansible/${_ansibleRoleVersion}/ansible_roles.zip /root/ansible_roles.zip ",
                "--region ${_region}\n",
                "\n",
                "# run bootstrap\n",
                "chmod 700 /root/ansible_scripts/bootstrap.sh && /root/ansible_scripts/bootstrap.sh | while IFS= ",
                "read -r line; do echo \"$(date '+%Y-%m-%d %H:%M:%S') $line\"; done |& tee -a /var/log/bootstrap.log\n",
                "\n",
                "# deploy ansible roles\n",
                "chmod 700 /root/ansible_scripts/deploy_roles.sh && /root/ansible_scripts/deploy_roles.sh ",
                "/root/ansible_roles.zip | while IFS= read -r line; do echo \"$(date '+%Y-%m-%d %H:%M:%S') $line\"; ",
                "done |& tee -a /var/log/bootstrap.log\n",
                "\n",
                "# pull playbooks\n",
                "aws s3 cp s3://${_devopsBucket}/projects/mobile-gateway/${_projectVersion}/ansible/playbooks/${_appName}/ ",
                "/etc/ansible/ --recursive --region ${_region}\n",
                "\n",
                "# pull variable file\n",
                "aws s3 cp s3://${_devopsBucket}/variables/${_environment}/ansible/mobile-gateway/${_appName}.yml ",
                "/etc/ansible/variables.yml --region ${_region}\n",
                "\n",
                "# run playbooks\n",
                "APP_VERSION=${_appVersion} /usr/local/bin/ansible-playbook /etc/ansible/provision_playbook.yml\n",
                "\n",
                "# run app jar\n",
                "sudo ln -s /root/app.jar /etc/init.d/app\n",
                "sudo /etc/init.d/app start --spring.profiles.active=h2,${_environment} \n",
                "\n",
                "# Send CFN Signal\n",
                "/opt/aws/bin/cfn-signal -e 0 --stack ${_stackName} --resource InstanceAsg --region ${_region}"
              ]
            ]
          }
        }
      }
    },
    "InstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {"Ref":  "asgDesiredCapacity"},
        "MaxSize": {"Ref":  "asgMaxCount"},
        "MinSize": {"Ref":  "asgMinCount"},
        "HealthCheckGracePeriod": 800,
        "HealthCheckType": "EC2",
        "TerminationPolicies": ["Default"],
        "ServiceLinkedRoleARN": {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/${asgServiceRoleName}"},
        "LaunchConfigurationName": {"Ref": "InstanceLc"},
        "VPCZoneIdentifier": [
          {"Fn::ImportValue": {"Fn::Sub": "${vpcStackName}-PrivateSubnetA-Id"} },
          {"Fn::ImportValue": {"Fn::Sub": "${vpcStackName}-PrivateSubnetB-Id"} }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": true
        }
      }
    }
  }
}
