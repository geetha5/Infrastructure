{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Web Proxy Cluster Template",
  "Parameters": {
    "environment": {
      "Type": "String",
      "Description": "The environment for the stack",
      "Default": "dev"
    },
    "vpcStackName": {
      "Type": "String",
      "Description": "The stack name of the VPC stack for cross stack references"
    },
    "acmCertArn": {
      "Type": "String",
      "Description": "The Arn of the ACM certificate"
    },
    "owningGroup": {
      "Type": "String",
      "Description": "The group that owns the VPC (for naming)"
    },
    "proxyDesiredCount": {
      "Type": "Number",
      "Description": "The desired number of proxy servers in the ASG",
      "Default": "4"
    },
    "proxyMinCount": {
      "Type": "Number",
      "Description": "The min number of proxy instances",
      "Default": "2"
    },
    "proxyMaxCount": {
      "Type": "Number",
      "Description": "The max number of proxy servers, must be larger then desired",
      "Default": "8"
    },
    "instanceKeyPair": {
      "Type": "String",
      "Description": "The ssh keypair for the instances"
    },
    "instanceType": {
      "Type": "String",
      "Description": "The instance type of the proxy instances",
      "Default": "t3.small"
    },
    "amiId": {
      "Type": "String",
      "Description": "This is the id of the ami"
    },
    "devopsBucket": {
      "Type": "String",
      "Description": "The DevOps bucket",
      "Default": "wex-mobile-devops"
    },
    "enableSsh": {
      "Type": "String",
      "Description": "If to enable ssh on instances",
      "Default": "no",
      "AllowedValues": [
        "yes",
        "no"
      ]
    },
    "hostedZoneId": {
      "Type": "String",
      "Description": "The hosted zone id for the web proxy DNS entry"
    },
    "dnsName": {
      "Type": "String",
      "Description": "The DNS name for the web proxy DNS entry "
    },
    "ansibleRoleVersion": {
      "Type": "String",
      "Description": "This is the version of ansible to deploy"
    },
    "webProxyProjectVersion": {
      "Type": "String",
      "Description": "The version of the web proxy project"
    },
    "proxyAsgUpdateBatchSize": {
      "Type": "Number",
      "Description": "The update batch size for the asg",
      "Default": "2"
    },
    "deploymentId": {
      "Description": "The Id of the deployment",
      "Type": "String"
    }
  },
  "Conditions": {
    "EnableSsh": { "Fn::Equals": [ { "Ref": "enableSsh" }, "yes" ] },
    "NonProd": { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "environment" }, "prod" ] } ] }
  },
  "Resources": {
    "AlbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web-proxy-alb-SG"] ] },
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web proxy alb security group" ] ] },
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Id" } },
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Cidr" } },
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443
          },
          {
            "CidrIp": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Cidr" } },
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80
          }
        ]
      }
    },
    "Alb": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Type": "application",
        "Scheme": "internal",
        "SecurityGroups": [ { "Ref": "AlbSecurityGroup" } ],
        "Name": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web-proxy-alb" ] ] },
        "Subnets": [
          { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-PrivateSubnetA-Id" } },
          { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-PrivateSubnetB-Id" } }
        ],
        "Tags": [
          { "Key": "Purpose", "Value": "WebProxy" },
          { "Key": "Environment", "Value": { "Ref": "environment" } },
          { "Key": "Group", "Value": { "Ref": "owningGroup" } }
        ]
      }
    },
    "AlbHttpTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "proxy-http-TG" ] ] },
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": 3129,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Port": 3129,
        "Protocol": "HTTP",
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Id" } },
        "Tags": [
          { "Key": "Purpose", "Value": "AuthProxy" },
          { "Key": "Environment", "Value": { "Ref": "environment" } },
          { "Key": "Group", "Value": { "Ref": "owningGroup" } }
        ]
      }
    },
    "AlbHttpsTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "proxy-https-TG" ] ] },
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTPS",
        "HealthCheckPort": 3130,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2,
        "Port": 3130,
        "Protocol": "HTTPS",
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Id" } },
        "Tags": [
          { "Key": "Purpose", "Value": "AuthProxy" },
          { "Key": "Environment", "Value": { "Ref": "environment" } },
          { "Key": "Group", "Value": { "Ref": "owningGroup" } }
        ]
      }
    },
    "AlbHttpListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "AlbHttpTargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "Alb" },
        "Port": "80",
        "Protocol": "HTTP"
      },
      "DependsOn": [ "Alb", "AlbHttpTargetGroup" ]
    },
    "AlbHttpListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "AlbHttpTargetGroup" }
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [ "/" ]
          }
        ],
        "ListenerArn": { "Ref": "AlbHttpListener" },
        "Priority": 1
      },
      "DependsOn": [ "AlbHttpListener", "AlbHttpTargetGroup" ]
    },
    "AlbHttpsListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [ { "CertificateArn": { "Ref": "acmCertArn" } } ],
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "AlbHttpsTargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "Alb" },
        "Port": "443",
        "SslPolicy": "ELBSecurityPolicy-TLS-1-2-2017-01",
        "Protocol": "HTTPS"
      },
      "DependsOn": [ "Alb", "AlbHttpsTargetGroup" ]
    },
    "AlbHttpsListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "AlbHttpsTargetGroup" }
          }
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "Values": [ "/" ]
          }
        ],
        "ListenerArn": { "Ref": "AlbHttpsListener" },
        "Priority": 2
      },
      "DependsOn": [ "AlbHttpsListener", "AlbHttpsTargetGroup" ]
    },
    "WebProxyIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CloudformationAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:SignalResource",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:cloudformation:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stack/", { "Ref": "AWS::StackName" }, "/*" ] ] }
                }
              ]
            }
          },
          {
            "PolicyName": "ElbAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "Ec2Tagging",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DeleteTags",
                    "ec2:DescribeTags",
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListAllMyBuckets"
                  ],
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:List*",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "devopsBucket" } ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "devopsBucket" }, "/*" ] ] }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ParameterStoreAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ssm:DescribeParameters",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ssm:GetParameter",
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:aws:ssm:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":parameter/", { "Ref": "environment" }, ".sumologic.accessid" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:ssm:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":parameter/", { "Ref": "environment" }, ".sumologic.accesskey" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:ssm:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":parameter/", { "Ref": "environment" }, ".oauth.public-key" ] ] },
                    { "Fn::Join": [ "", [ "arn:aws:ssm:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":parameter/", { "Ref": "environment" }, ".imageservice.client-secret" ] ] }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "kms:Decrypt",
                  "Resource": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-ParameterStoreKmsKey-Arn" } }
                }
              ]
            }
          },
          {
            "PolicyName": "CloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:Describe*",
                    "cloudwatch:Describe*",
                    "cloudwatch:List*",
                    "cloudwatch:PutMetricAlarm*",
                    "cloudwatch:PutMetricData",
                    "cloudwatch:DeleteAlarms",
                    "cloudwatch:Get*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WebProxyIamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web-proxy-iam-profile" ] ] },
        "Path": "/",
        "Roles": [ { "Ref": "WebProxyIamRole" } ]
      }
    },
    "WebProxyInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": { "Fn::Join": [ "-", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web-proxy-SG"] ] },
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web proxy security group" ] ] },
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-Vpc-Id" } },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": { "Ref": "AlbSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": 3129,
            "ToPort": 3129
          },
          {
            "SourceSecurityGroupId": { "Ref": "AlbSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": 3130,
            "ToPort": 3130
          }
        ]
      }
    },
    "ProxySshDev78NetIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSsh",
      "Properties": {
        "GroupId": { "Ref": "WebProxyInstanceSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "CidrIp": "10.78.0.0/16"
      }
    },
    "ProxySshDev79NetIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSsh",
      "Properties": {
        "GroupId": { "Ref": "WebProxyInstanceSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "CidrIp": "10.79.0.0/16"
      }
    },
    "WebProxyLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "IamInstanceProfile": { "Ref": "WebProxyIamInstanceProfile" },
        "ImageId": { "Ref": "amiId" },
        "InstanceType": { "Ref": "instanceType" },
        "SecurityGroups": [ { "Ref": "WebProxyInstanceSecurityGroup" } ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": "30",
              "VolumeType": "gp2"
            }
          }
        ],
        "KeyName": { "Fn::If": [ "EnableSsh", { "Ref": "instanceKeyPair" }, { "Ref": "AWS::NoValue" } ] },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "\n",
                "# initialization variables\n",
                "_devopsBucket=", { "Ref": "devopsBucket" }, "\n",
                "_environment=", { "Ref": "environment" }, "\n",
                "_region=", { "Ref": "AWS::Region" }, "\n",
                "_ansibleRoleVersion=", { "Ref": "ansibleRoleVersion" }, "\n",
                "_projectVersion=", { "Ref": "webProxyProjectVersion" }, "\n",
                "_albTargetGroupArn=", { "Ref": "AlbHttpsTargetGroup" }, "\n",
                "_stackName=", { "Ref": "AWS::StackName" }, "\n",
                "_deploymentId=", { "Ref": "deploymentId" }, "\n",
                "\n",
                "# pull ansible scripts\n",
                "mkdir /root/ansible_scripts\n",
                "aws s3 cp s3://${_devopsBucket}/ansible/${_ansibleRoleVersion}/scripts /root/ansible_scripts ",
                "--recursive --region ${_region}\n",
                "chmod -R 700 /root/ansible_scripts\n",
                "\n",
                "# pull ansible role archive\n",
                "aws s3 cp s3://${_devopsBucket}/ansible/${_ansibleRoleVersion}/ansible_roles.zip /root/ansible_roles.zip ",
                "--region ${_region}\n",
                "\n",
                "# run bootstrap\n",
                "chmod 700 /root/ansible_scripts/bootstrap.sh && /root/ansible_scripts/bootstrap.sh | while IFS= ",
                "read -r line; do echo \"$(date '+%Y-%m-%d %H:%M:%S') $line\"; done |& tee -a /var/log/bootstrap.log\n",
                "\n",
                "# deploy ansible roles\n",
                "chmod 700 /root/ansible_scripts/deploy_roles.sh && /root/ansible_scripts/deploy_roles.sh ",
                "/root/ansible_roles.zip | while IFS= read -r line; do echo \"$(date '+%Y-%m-%d %H:%M:%S') $line\"; ",
                "done |& tee -a /var/log/bootstrap.log\n",
                "\n",
                "# pull playbooks\n",
                "aws s3 cp s3://${_devopsBucket}/projects/web-proxy/${_projectVersion}/ansible/playbooks/web-proxy/ ",
                "/etc/ansible/ --recursive --region ${_region}\n",
                "\n",
                "# pull variable file\n",
                "aws s3 cp s3://${_devopsBucket}/variables/${_environment}/ansible/web-proxy/web-proxy.yml ",
                "/etc/ansible/variables.yml --region ${_region}\n",
                "\n",
                "# run playbooks\n",
                "/usr/local/bin/ansible-playbook /etc/ansible/provision_playbook.yml\n",
                "\n",
                "/opt/aws/bin/cfn-signal -e 0 --stack ${_stackName} --resource WebProxyAutoscalingGroup --region ${_region} \n"
              ]
            ]
          }
        }
      }
    },
    "WebProxyAutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Cooldown": "300",
        "DesiredCapacity": { "Ref": "proxyDesiredCount" },
        "MaxSize": { "Ref": "proxyMaxCount" },
        "MinSize": { "Ref": "proxyMinCount" },
        "HealthCheckGracePeriod": 800,
        "HealthCheckType": "EC2",
        "TerminationPolicies": [ "Default" ],
        "LaunchConfigurationName": { "Ref": "WebProxyLaunchConfig" },
        "TargetGroupARNs": [ { "Ref": "AlbHttpTargetGroup" }, { "Ref": "AlbHttpsTargetGroup" } ],
        "VPCZoneIdentifier": [
          { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-PrivateSubnetA-Id" } },
          { "Fn::ImportValue": { "Fn::Sub": "${vpcStackName}-PrivateSubnetB-Id" } }
        ]
      },
      "DependsOn": [ "WebProxyLaunchConfig" ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "proxyDesiredCount" },
          "Timeout": "PT25M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": { "Ref": "proxyAsgUpdateBatchSize" },
          "MinInstancesInService": { "Ref": "proxyMinCount" },
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "Route53WebProxyRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": { "Ref": "hostedZoneId" },
        "Comment": { "Fn::Join": [ " ", [ { "Ref": "environment" }, { "Ref": "owningGroup" }, "web proxy DNS record" ] ] },
        "Name": { "Ref": "dnsName" },
        "Type": "CNAME",
        "TTL": 300,
        "ResourceRecords": [ { "Fn::GetAtt": [ "Alb", "DNSName" ] } ]
      }
    }
  }
}
